name: CI/CD Pipeline

on:
  push:
    branches:
      - main # หรือสาขาหลักของโปรเจกต์
  pull_request:
    branches:
      - main # จะทำงานเมื่อมีการเปิด PR ไปที่สาขาหลัก

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: taskManage_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      # เช็คเอาท์โค้ดจาก GitHub
      - name: Checkout code
        uses: actions/checkout@v2

      # ตั้งค่า go เวอร์ชันที่ต้องการ
      - name: Set up Node.js
        uses: actions/setup-go@v2
        with:
          go-version: "1.24.0" # ใช้ go เวอร์ชันที่ต้องการ

      # ติดตั้ง dependencies
      - name: Install dependencies
        run: |
          go mod tidy

      # รัน Unit Tests และ Integration Tests
      - name: Run tests
        run: go test ./...

      # สร้าง Docker Image
      - name: Build Docker image back-app
        run: |
          docker build -f Dockerfile.prod -t back-app .

      # Push Docker image ไปที่ Docker Hub (ถ้าต้องการ)
      - name: Push Docker image
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker tag back-app ${{ secrets.DOCKER_USERNAME }}/back-app:latest  # ใช้ latest แทน tagname
          docker push ${{ secrets.DOCKER_USERNAME }}/back-app:latest  # ใช้ latest แทน tagname
      # # Deploy to Vercel (ถ้าต้องการ deploy ไป Vercel)
      # - name: Deploy to Vercel
      #   run: |
      #     vercel --prod --token $VERCEL_TOKEN
